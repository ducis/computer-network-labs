sdiyazg@sjtu.edu.cn
The executable should be called exactly as required, that is, "./dsdv port input_file". 
No additional parameters is used.
The building command is "make all" or "make dsdv"
The program can be built and run under Windows, too.
Design:
	1.On startup, the program broadcasts its presence (and prints its routing table, which is empty) first and then start waiting. So the first print-out is always empty.
	2.time() is used for timing, so the print-out period is controlled only to the precision of 1 sec. The program will keep the average interval at 10 sec, so there is no accumulated error. But if the program is blocked for more than one 10-sec cycle it will try to "catch-up" by printing replicate messages without recving new information. 
	3.Actually the original DSDV doesn't seem to converge to the optimal solution. When it's time for a node to print its routing table, the last information it has received may be a path with a large cost and a new sequence number, which overwrites an older but optimal path. This can cause path fluctuation. Under very stable network condition (the loopback interface), the broadcast interval being equal and stable, the routing choices are likely to "converge" to a sub-optimal solution. For example, between every two successive print-outs, a node can receive paths (seq_num,cost) in a pattern like "(n,1),(n+2,2)", so the node would always use the (n+2,2) path during a print-out. In real-world situations the route with a lower cost is likely to reach a node earlier, so this problem may be less obvious. But this is not the case in our simulated routing. My solution to this problem is to keep two records of routing information (next_hop,seq_num,cost) for one destination, with the newest two sequence numbers. During the print-out the record with a lower cost is used. When a route with the sequence number of (n+2) is received, it's likely that all routes with the sequence number of n have been already received, and the record with the sequence number of (n-2) can be safely discarded.
